[
  {
    "name": "CHAT_CHANNEL",
    "description": "Source chat channel which triggered the [ChatOps](../chatops/README.md) command."
  },
  {
    "name": "CHAT_INPUT",
    "description": "Additional arguments passed in the [ChatOps](../chatops/README.md) command."
  },
  {
    "name": "CI",
    "description": "Mark that job is executed in CI environment."
  },
  {
    "name": "CI_API_V4_URL",
    "description": "The GitLab API v4 root URL."
  },
  {
    "name": "CI_BUILDS_DIR",
    "description": "Top-level directory where builds are executed."
  },
  {
    "name": "CI_COMMIT_BEFORE_SHA",
    "description": "The previous latest commit present on a branch. Is always `0000000000000000000000000000000000000000` in pipelines for merge requests."
  },
  {
    "name": "CI_COMMIT_DESCRIPTION",
    "description": "The description of the commit: the message without first line, if the title is shorter than 100 characters; full message in other case."
  },
  {
    "name": "CI_COMMIT_MESSAGE",
    "description": "The full commit message."
  },
  {
    "name": "CI_COMMIT_REF_NAME",
    "description": "The branch or tag name for which project is built."
  },
  {
    "name": "CI_COMMIT_REF_PROTECTED",
    "description": "`true` if the job is running on a protected reference, `false` if not."
  },
  {
    "name": "CI_COMMIT_REF_SLUG",
    "description": "`$CI_COMMIT_REF_NAME` in lowercase, shortened to 63 bytes, and with everything except `0-9` and `a-z` replaced with `-`. No leading / trailing `-`. Use in URLs, host names and domain names."
  },
  {
    "name": "CI_COMMIT_SHA",
    "description": "The commit revision for which project is built."
  },
  {
    "name": "CI_COMMIT_SHORT_SHA",
    "description": "The first eight characters of `CI_COMMIT_SHA`."
  },
  {
    "name": "CI_COMMIT_BRANCH",
    "description": "The commit branch name. Present in branch pipelines, including pipelines for the default branch. Not present in merge request pipelines or tag pipelines."
  },
  {
    "name": "CI_COMMIT_TAG",
    "description": "The commit tag name. Present only when building tags."
  },
  {
    "name": "CI_COMMIT_TITLE",
    "description": "The title of the commit - the full first line of the message."
  },
  {
    "name": "CI_COMMIT_TIMESTAMP",
    "description": "The timestamp of the commit in the ISO 8601 format."
  },
  {
    "name": "CI_CONCURRENT_ID",
    "description": "Unique ID of build execution in a single executor."
  },
  {
    "name": "CI_CONCURRENT_PROJECT_ID",
    "description": "Unique ID of build execution in a single executor and project."
  },
  {
    "name": "CI_CONFIG_PATH",
    "description": "The path to CI configuration file. Defaults to `.gitlab-ci.yml`."
  },
  {
    "name": "CI_DEBUG_TRACE",
    "description": "Whether [debug logging (tracing)](README.md#debug-logging) is enabled."
  },
  {
    "name": "CI_DEFAULT_BRANCH",
    "description": "The name of the default branch for the project."
  },
  {
    "name": "CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX",
    "description": "The image prefix for pulling images through the Dependency Proxy."
  },
  {
    "name": "CI_DEPENDENCY_PROXY_SERVER",
    "description": "The server for logging in to the Dependency Proxy. This is equivalent to `$CI_SERVER_HOST:$CI_SERVER_PORT`."
  },
  {
    "name": "CI_DEPENDENCY_PROXY_PASSWORD",
    "description": "The password to use to pull images through the Dependency Proxy."
  },
  {
    "name": "CI_DEPENDENCY_PROXY_USER",
    "description": "The username to use to pull images through the Dependency Proxy."
  },
  {
    "name": "CI_DEPLOY_FREEZE",
    "description": "Included with the value `true` if the pipeline runs during a [deploy freeze window](../../user/project/releases/index.md#prevent-unintentional-releases-by-setting-a-deploy-freeze)."
  },
  {
    "name": "CI_DEPLOY_PASSWORD",
    "description": "Authentication password of the [GitLab Deploy Token](../../user/project/deploy_tokens/index.md#gitlab-deploy-token), only present if the Project has one related."
  },
  {
    "name": "CI_DEPLOY_USER",
    "description": "Authentication username of the [GitLab Deploy Token](../../user/project/deploy_tokens/index.md#gitlab-deploy-token), only present if the Project has one related."
  },
  {
    "name": "CI_DISPOSABLE_ENVIRONMENT",
    "description": "Marks that the job is executed in a disposable environment (something that is created only for this job and disposed of/destroyed after the execution - all executors except `shell` and `ssh`). If the environment is disposable, it is set to true, otherwise it is not defined at all."
  },
  {
    "name": "CI_ENVIRONMENT_NAME",
    "description": "The name of the environment for this job. Only present if [`environment:name`](../yaml/README.md#environmentname) is set."
  },
  {
    "name": "CI_ENVIRONMENT_SLUG",
    "description": "A simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, and so on. Only present if [`environment:name`](../yaml/README.md#environmentname) is set."
  },
  {
    "name": "CI_ENVIRONMENT_URL",
    "description": "The URL of the environment for this job. Only present if [`environment:url`](../yaml/README.md#environmenturl) is set."
  },
  {
    "name": "CI_EXTERNAL_PULL_REQUEST_IID",
    "description": "Pull Request ID from GitHub if the [pipelines are for external pull requests](../ci_cd_for_external_repos/index.md#pipelines-for-external-pull-requests). Available only if `only: [external_pull_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the pull request is open."
  },
  {
    "name": "CI_EXTERNAL_PULL_REQUEST_SOURCE_REPOSITORY",
    "description": "The source repository name of the pull request if [the pipelines are for external pull requests](../ci_cd_for_external_repos/index.md#pipelines-for-external-pull-requests). Available only if `only: [external_pull_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the pull request is open."
  },
  {
    "name": "CI_EXTERNAL_PULL_REQUEST_TARGET_REPOSITORY",
    "description": "The target repository name of the pull request if [the pipelines are for external pull requests](../ci_cd_for_external_repos/index.md#pipelines-for-external-pull-requests). Available only if `only: [external_pull_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the pull request is open."
  },
  {
    "name": "CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_NAME",
    "description": "The source branch name of the pull request if [the pipelines are for external pull requests](../ci_cd_for_external_repos/index.md#pipelines-for-external-pull-requests). Available only if `only: [external_pull_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the pull request is open."
  },
  {
    "name": "CI_EXTERNAL_PULL_REQUEST_SOURCE_BRANCH_SHA",
    "description": "The HEAD SHA of the source branch of the pull request if [the pipelines are for external pull requests](../ci_cd_for_external_repos/index.md#pipelines-for-external-pull-requests). Available only if `only: [external_pull_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the pull request is open."
  },
  {
    "name": "CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME",
    "description": "The target branch name of the pull request if [the pipelines are for external pull requests](../ci_cd_for_external_repos/index.md#pipelines-for-external-pull-requests). Available only if `only: [external_pull_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the pull request is open."
  },
  {
    "name": "CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_SHA",
    "description": "The HEAD SHA of the target branch of the pull request if [the pipelines are for external pull requests](../ci_cd_for_external_repos/index.md#pipelines-for-external-pull-requests). Available only if `only: [external_pull_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the pull request is open."
  },
  {
    "name": "CI_HAS_OPEN_REQUIREMENTS",
    "description": "Included with the value `true` only if the pipeline's project has any open [requirements](../../user/project/requirements/index.md). Not included if there are no open requirements for the pipeline's project."
  },
  {
    "name": "CI_OPEN_MERGE_REQUESTS",
    "description": "Available in branch and merge request pipelines. Contains a comma-separated list of up to four merge requests that use the current branch and project as the merge request source. For example `gitlab-org/gitlab!333,gitlab-org/gitlab-foss!11`."
  },
  {
    "name": "CI_JOB_ID",
    "description": "The unique ID of the current job that GitLab CI/CD uses internally."
  },
  {
    "name": "CI_JOB_IMAGE",
    "description": "The name of the image running the CI job."
  },
  {
    "name": "CI_JOB_MANUAL",
    "description": "The flag to indicate that job was manually started."
  },
  {
    "name": "CI_JOB_NAME",
    "description": "The name of the job as defined in `.gitlab-ci.yml`."
  },
  {
    "name": "CI_JOB_STAGE",
    "description": "The name of the stage as defined in `.gitlab-ci.yml`."
  },
  {
    "name": "CI_JOB_STATUS",
    "description": "The state of the job as each runner stage is executed. Use with [`after_script`](../yaml/README.md#after_script) where `CI_JOB_STATUS` can be either: `success`, `failed` or `canceled`."
  },
  {
    "name": "CI_JOB_TOKEN",
    "description": "Token used for authenticating with [a few API endpoints](../../api/README.md#gitlab-ci-job-token) and downloading [dependent repositories](../../user/project/new_ci_build_permissions_model.md#dependent-repositories). The token is valid as long as the job is running."
  },
  {
    "name": "CI_JOB_JWT",
    "description": "RS256 JSON web token that can be used for authenticating with third party systems that support JWT authentication, for example [HashiCorp's Vault](../secrets/index.md)."
  },
  {
    "name": "CI_JOB_URL",
    "description": "Job details URL."
  },
  {
    "name": "CI_KUBERNETES_ACTIVE",
    "description": "Included with the value `true` only if the pipeline has a Kubernetes cluster available for deployments. Not included if no cluster is available. Can be used as an alternative to [`only:kubernetes`/`except:kubernetes`](../yaml/README.md#onlykubernetesexceptkubernetes) with [`rules:if`](../yaml/README.md#rulesif)."
  },
  {
    "name": "CI_MERGE_REQUEST_ASSIGNEES",
    "description": "Comma-separated list of username(s) of assignee(s) for the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_ID",
    "description": "The instance-level ID of the merge request. Only available if [the pipelines are for merge requests](../merge_request_pipelines/index.md) and the merge request is created. This is a unique ID across all projects on GitLab."
  },
  {
    "name": "CI_MERGE_REQUEST_IID",
    "description": "The project-level IID (internal ID) of the merge request. Only available If [the pipelines are for merge requests](../merge_request_pipelines/index.md) and the merge request is created. This ID is unique for the current project."
  },
  {
    "name": "CI_MERGE_REQUEST_LABELS",
    "description": "Comma-separated label names of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_MILESTONE",
    "description": "The milestone title of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_PROJECT_ID",
    "description": "The ID of the project of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_PROJECT_PATH",
    "description": "The path of the project of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md) (for example `namespace/awesome-project`). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_PROJECT_URL",
    "description": "The URL of the project of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md) (for example `http://192.168.10.15:3000/namespace/awesome-project`). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_REF_PATH",
    "description": "The ref path of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). (for example `refs/merge-requests/1/head`). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_SOURCE_BRANCH_NAME",
    "description": "The source branch name of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_SOURCE_BRANCH_SHA",
    "description": "The HEAD SHA of the source branch of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used, the merge request is created, and the pipeline is a [merged result pipeline](../merge_request_pipelines/pipelines_for_merged_results/index.md). **(PREMIUM)**"
  },
  {
    "name": "CI_MERGE_REQUEST_SOURCE_PROJECT_ID",
    "description": "The ID of the source project of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_SOURCE_PROJECT_PATH",
    "description": "The path of the source project of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_SOURCE_PROJECT_URL",
    "description": "The URL of the source project of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_TARGET_BRANCH_NAME",
    "description": "The target branch name of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_TARGET_BRANCH_SHA",
    "description": "The HEAD SHA of the target branch of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or [`rules`](../yaml/README.md#rules) syntax is used, the merge request is created, and the pipeline is a [merged result pipeline](../merge_request_pipelines/pipelines_for_merged_results/index.md). **(PREMIUM)**"
  },
  {
    "name": "CI_MERGE_REQUEST_TITLE",
    "description": "The title of the merge request if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Available only if `only: [merge_requests]` or  [`rules`](../yaml/README.md#rules) syntax is used and the merge request is created."
  },
  {
    "name": "CI_MERGE_REQUEST_EVENT_TYPE",
    "description": "The event type of the merge request, if [the pipelines are for merge requests](../merge_request_pipelines/index.md). Can be `detached`, `merged_result` or `merge_train`."
  },
  {
    "name": "CI_MERGE_REQUEST_DIFF_ID",
    "description": "The version of the merge request diff, if [the pipelines are for merge requests](../merge_request_pipelines/index.md)."
  },
  {
    "name": "CI_MERGE_REQUEST_DIFF_BASE_SHA",
    "description": "The base SHA of the merge request diff, if [the pipelines are for merge requests](../merge_request_pipelines/index.md)."
  },
  {
    "name": "CI_NODE_INDEX",
    "description": "Index of the job in the job set. If the job is not parallelized, this variable is not set."
  },
  {
    "name": "CI_NODE_TOTAL",
    "description": "Total number of instances of this job running in parallel. If the job is not parallelized, this variable is set to `1`."
  },
  {
    "name": "CI_PAGES_DOMAIN",
    "description": "The configured domain that hosts GitLab Pages."
  },
  {
    "name": "CI_PAGES_URL",
    "description": "URL to GitLab Pages-built pages. Always belongs to a subdomain of `CI_PAGES_DOMAIN`."
  },
  {
    "name": "CI_PIPELINE_ID",
    "description": "The instance-level ID of the current pipeline. This is a unique ID across all projects on GitLab."
  },
  {
    "name": "CI_PIPELINE_IID",
    "description": "The project-level IID (internal ID) of the current pipeline. This ID is unique for the current project."
  },
  {
    "name": "CI_PIPELINE_SOURCE",
    "description": "Indicates how the pipeline was triggered. Possible options are: `push`, `web`, `schedule`, `api`, `external`, `chat`, `webide`, `merge_request_event`, `external_pull_request_event`, `parent_pipeline`, [`trigger`, or `pipeline`](../triggers/README.md#authentication-tokens). For pipelines created before GitLab 9.5, this is displayed as `unknown`."
  },
  {
    "name": "CI_PIPELINE_TRIGGERED",
    "description": "The flag to indicate that job was [triggered](../triggers/README.md)."
  },
  {
    "name": "CI_PIPELINE_URL",
    "description": "Pipeline details URL."
  },
  {
    "name": "CI_PROJECT_CONFIG_PATH",
    "description": "The CI configuration path for the project."
  },
  {
    "name": "CI_PROJECT_DIR",
    "description": "The full path where the repository is cloned and where the job is run. If the GitLab Runner `builds_dir` parameter is set, this variable is set relative to the value of `builds_dir`. For more information, see [Advanced configuration](https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runners-section) for GitLab Runner."
  },
  {
    "name": "CI_PROJECT_ID",
    "description": "The unique ID of the current project that GitLab CI/CD uses internally."
  },
  {
    "name": "CI_PROJECT_NAME",
    "description": "The name of the directory for the project that is being built. For example, if the project URL is `gitlab.example.com/group-name/project-1`, the `CI_PROJECT_NAME` would be `project-1`."
  },
  {
    "name": "CI_PROJECT_NAMESPACE",
    "description": "The project namespace (username or group name) that is being built."
  },
  {
    "name": "CI_PROJECT_ROOT_NAMESPACE",
    "description": "The **root** project namespace (username or group name) that is being built. For example, if `CI_PROJECT_NAMESPACE` is `root-group/child-group/grandchild-group`, `CI_PROJECT_ROOT_NAMESPACE` would be `root-group`."
  },
  {
    "name": "CI_PROJECT_PATH",
    "description": "The namespace with project name."
  },
  {
    "name": "CI_PROJECT_PATH_SLUG",
    "description": "`$CI_PROJECT_PATH` in lowercase and with everything except `0-9` and `a-z` replaced with `-`. Use in URLs and domain names."
  },
  {
    "name": "CI_PROJECT_REPOSITORY_LANGUAGES",
    "description": "Comma-separated, lowercase list of the languages used in the repository (for example `ruby,javascript,html,css`)."
  },
  {
    "name": "CI_PROJECT_TITLE",
    "description": "The human-readable project name as displayed in the GitLab web interface."
  },
  {
    "name": "CI_PROJECT_URL",
    "description": "The HTTP(S) address to access project."
  },
  {
    "name": "CI_PROJECT_VISIBILITY",
    "description": "The project visibility (internal, private, public)."
  },
  {
    "name": "CI_REGISTRY",
    "description": "If the Container Registry is enabled it returns the address of the GitLab Container Registry. This variable includes a `:port` value if one has been specified in the registry configuration."
  },
  {
    "name": "CI_REGISTRY_IMAGE",
    "description": "If the Container Registry is enabled for the project it returns the address of the registry tied to the specific project."
  },
  {
    "name": "CI_REGISTRY_PASSWORD",
    "description": "The password to use to push containers to the GitLab Container Registry, for the current project."
  },
  {
    "name": "CI_REGISTRY_USER",
    "description": "The username to use to push containers to the GitLab Container Registry, for the current project."
  },
  {
    "name": "CI_REPOSITORY_URL",
    "description": "The URL to clone the Git repository."
  },
  {
    "name": "CI_RUNNER_DESCRIPTION",
    "description": "The description of the runner as saved in GitLab."
  },
  {
    "name": "CI_RUNNER_EXECUTABLE_ARCH",
    "description": "The OS/architecture of the GitLab Runner executable (note that this is not necessarily the same as the environment of the executor)."
  },
  {
    "name": "CI_RUNNER_ID",
    "description": "The unique ID of runner being used."
  },
  {
    "name": "CI_RUNNER_REVISION",
    "description": "GitLab Runner revision that is executing the current job."
  },
  {
    "name": "CI_RUNNER_SHORT_TOKEN",
    "description": "First eight characters of the runner's token used to authenticate new job requests. Used as the runner's unique ID."
  },
  {
    "name": "CI_RUNNER_TAGS",
    "description": "The defined runner tags."
  },
  {
    "name": "CI_RUNNER_VERSION",
    "description": "GitLab Runner version that is executing the current job."
  },
  {
    "name": "CI_SERVER",
    "description": "Mark that job is executed in CI environment."
  },
  {
    "name": "CI_SERVER_URL",
    "description": "The base URL of the GitLab instance, including protocol and port (like `https://gitlab.example.com:8080`)."
  },
  {
    "name": "CI_SERVER_HOST",
    "description": "Host component of the GitLab instance URL, without protocol and port (like `gitlab.example.com`)."
  },
  {
    "name": "CI_SERVER_PORT",
    "description": "Port component of the GitLab instance URL, without host and protocol (like `3000`)."
  },
  {
    "name": "CI_SERVER_PROTOCOL",
    "description": "Protocol component of the GitLab instance URL, without host and port (like `https`)."
  },
  {
    "name": "CI_SERVER_NAME",
    "description": "The name of CI server that is used to coordinate jobs."
  },
  {
    "name": "CI_SERVER_REVISION",
    "description": "GitLab revision that is used to schedule jobs."
  },
  {
    "name": "CI_SERVER_VERSION",
    "description": "GitLab version that is used to schedule jobs."
  },
  {
    "name": "CI_SERVER_VERSION_MAJOR",
    "description": "GitLab version major component."
  },
  {
    "name": "CI_SERVER_VERSION_MINOR",
    "description": "GitLab version minor component."
  },
  {
    "name": "CI_SERVER_VERSION_PATCH",
    "description": "GitLab version patch component."
  },
  {
    "name": "CI_SHARED_ENVIRONMENT",
    "description": "Marks that the job is executed in a shared environment (something that is persisted across CI invocations like `shell` or `ssh` executor). If the environment is shared, it is set to true, otherwise it is not defined at all."
  },
  {
    "name": "GITLAB_CI",
    "description": "Mark that job is executed in GitLab CI/CD environment."
  },
  {
    "name": "GITLAB_FEATURES",
    "description": "The comma separated list of licensed features available for your instance and plan."
  },
  {
    "name": "GITLAB_USER_EMAIL",
    "description": "The email of the user who started the job."
  },
  {
    "name": "GITLAB_USER_ID",
    "description": "The ID of the user who started the job."
  },
  {
    "name": "GITLAB_USER_LOGIN",
    "description": "The login username of the user who started the job."
  },
  {
    "name": "GITLAB_USER_NAME",
    "description": "The real name of the user who started the job."
  }
]
